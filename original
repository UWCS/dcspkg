fn download_install_file(
    pkg_name: &str,
    checksum: u32,
    server_url: &Url,
    install_dir: &Path,
) -> Result<()> {
    let url = server_url
        .join(format!("{}/{}.dcspkg", crate::FILE_ENDPOINT, pkg_name).as_ref())
        .context("Could not parse URL")?;

    log::info!("Downloading compressed package {pkg_name} from {url}...");

    let response = get(url.as_ref()).context("Request failed")?;
    log::info!("Got response from {url}");
    
    if response.status() != StatusCode::OK {
        bail!(
            "Response was not okay (got code {} when requesting {})",
            response.status().as_u16(),
            url
        )
    }

    //the content of the response
    let compressed = response
        .bytes()
        .context("Could not get content of response")?;

    log::info!("Decompressing and unpacking package...");

    //decompress and unarchive the bytes
    let reader = GzDecoder::new(CrcReader::new(compressed.reader()));
    let mut archive = Archive::new(reader);

    //unpack archive
    archive
        .unpack(install_dir)
        .context("Could not unpack archive")?;

    let downloaded_checksum = archive.into_inner().into_inner().crc().sum();
    log::info!("Checksum of downloaded package is {downloaded_checksum} (expected {checksum})");

    // if downloaded_checksum != checksum {
    //     return Err(anyhow!("Checksum for downloaded file did not match!"));
    // }

    log::info!("Unpacked archive");
    log::debug!("Unpacked into {:?}", install_dir);

    Ok(())
}